@page "/asr"

@using Transcriptor.Py.Wrapper.Implementation
@using Transcriptor.Py.Wrapper.Enums
@using System.Reactive.Linq
@using System.Diagnostics

@implements IDisposable

@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h3>CH Speech to Text</h3>

<div id="chat-container">
    <div id="chat-box">
        @foreach (var transcriptMessage in transcriptMessages.ToArray())
        {
            <div class="other-bubble">
                @transcriptMessage.Message
            </div>
        }
    </div>
    <div id="ai-input">
        <button id="record-button" @onclick="async () => await StartAudioTranscriptionAsync()">@RecordButtonText</button>
        <button id="clear-button" @onclick="Clear">Clear</button>
    </div>
    <div id="chat-box">
        @foreach (var transcriptMessage in rawTranscriptMessages.ToArray())
        {
            <div class="other-bubble">
                @transcriptMessage.Speaker @transcriptMessage.Message
            </div>
        }
    </div>
</div>

@code {
    public class TranscriptMessage
    {
        public double Start { get; set; }
        public double Length { get; set; }
        public string Speaker { get; set; } = "Speaker1";
        public string? Message { get; set; }
    }
    
    private readonly List<TranscriptMessage> transcriptMessages = [];
    private readonly List<TranscriptMessage> rawTranscriptMessages = [];
    
    private WhisperTranscriptor? transcriptor;
    
    private Timer? updateTimer;

    private string RecordButtonText = "Record";
    
    private async Task StartAudioTranscriptionAsync()
    {
        if (transcriptor != null)
        {
            transcriptor?.StopAsync();
            transcriptor?.Dispose();

            RecordButtonText = "Record";
            return;
        }
        
        var serviceUri = new Uri("ws://192.168.0.98:8765");
        transcriptor = new WhisperTranscriptor(serviceUri);

        var devices = await transcriptor.GetInputInterfacesAsync().ToListAsync();
        //var pulseDevice = devices.Single(d => d.Name == "MacBook Pro Microphone");
        var options = new WhisperTranscriptorOptions(
            ModelType.WhisperX, ModelSize: "large-v2", Language: "th", IsMultiLanguage: false);
        var url =
            new Uri(
                "https://cdn-live.tpchannel.org/v1/0180e10a4a7809df73070d7d8760/0180e10adac40b8ed59433d5f3ce/main.m3u8");
        
        await transcriptor.StartRecordAsync(url, options);
        
        double latestStartTime = 0;
        string latestDialog = "";

        transcriptor
            .Where(m => m?.Text != null)
            .Where(m => m!.Text != "โปรดติดตามตอนต่อไป")
            .Subscribe(
                msg =>
                {
                    Debug.WriteLine(msg.Text);

                    rawTranscriptMessages.Add(
                        new TranscriptMessage
                        {
                            Start = msg.Start,
                            Length = msg.End - msg.Start,
                            Speaker = $"{msg.Start}-{msg.End} Speaker1 : ",
                            Message = msg.Text
                        });
                    
                    if (!transcriptMessages.Any())
                    {
                        transcriptMessages.Add(
                            new TranscriptMessage
                            {
                                Start = msg.Start,
                                Length = msg.End - msg.Start,
                                Speaker = $"{msg.Start}-{msg.End} Speaker1 : ",
                                Message = msg.Text
                            });
                    }
                    else
                    {
                        if (msg.End - msg.Start >= transcriptMessages[^1].Length &&
                            msg.Start - transcriptMessages[^1].Start <= 1f)
                        {
                            transcriptMessages[^1] =
                                new TranscriptMessage
                                {
                                    Start = msg.Start,
                                    Length = msg.End - msg.Start,
                                    Speaker = $"{msg.Start}-{msg.End} Speaker1 ",
                                    Message = msg.Text
                                };
                        }
                        else if(msg.Start > transcriptMessages[^1].Start)
                        {
                            transcriptMessages.Add(
                                new TranscriptMessage
                                {
                                    Start = msg.Start,
                                    Length = msg.End - msg.Start,
                                    Speaker = $"{msg.Start}-{msg.End} Speaker1 ",
                                    Message = msg.Text
                                });
                        }
                    }
                    
                    InvokeAsync(StateHasChanged);
                    
                    JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-box");
                    
                    latestDialog = msg.Text;
                });
        
        RecordButtonText = "Stop";
    }
    
    private string SkipDuplicateCharacters(string text, string latestDialog)
    {
        return
            new string(
                text.Zip(latestDialog)
                    .SkipWhile(tuple => tuple.First == tuple.Second)
                    .Select(tuple => tuple.First)
                    .ToArray());
    }

    private void Clear()
    {
        transcriptMessages.Clear();
    }
    
    public void Dispose()
    {
        transcriptor?.StopAsync();
        transcriptor?.Dispose();
        updateTimer?.Dispose();
    }
}