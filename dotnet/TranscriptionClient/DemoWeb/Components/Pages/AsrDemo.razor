@page "/asr"
@using WhisperLive.Client.Implementation
@using WhisperLive.Abstraction.Configurations
@using WhisperLive.Client.Filters

@implements IDisposable

@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h3>CH Speech to Text</h3>

<div id="chat-container">
    @foreach (var v in transcriptMessagesDict.OrderBy(kvp => kvp.Key))
    {
        <div id="spk-@v.Key">
            @v.Key
        </div>
        <div id="chat-box">
            @foreach (var transcriptMessage in v.Value.ToArray())
            {
                <div class="other-bubble">
                    @transcriptMessage.Value.Message
                </div>
            }
        </div>
    }
    <div id="ai-input">
        <button id="record-button" @onclick="async () => await StartAudioTranscriptionAsync()">@RecordButtonText</button>
        <button id="clear-button" @onclick="Clear">Clear</button>
    </div>
    <div id="chat-box">
        @foreach (var transcriptMessage in rawTranscriptMessages.ToArray())
        {
            <div class="other-bubble">
                @transcriptMessage.Speaker @transcriptMessage.Message
            </div>
        }
    </div>
</div>

@code {

    public class TranscriptMessage
    {
        public double Start { get; set; }
        public double End { get; set; }
        public double Length { get; set; }
        public string? Speaker { get; set; }
        public string? Message { get; set; }
    }

    private readonly Dictionary<string, SortedList<double, TranscriptMessage>> transcriptMessagesDict = new();
    private readonly List<TranscriptMessage> rawTranscriptMessages = [];

    private WhisperTranscriptor? transcriptor;

    private Timer? updateTimer;

    private string RecordButtonText = "Record";

    private async Task StartAudioTranscriptionAsync()
    {
        if (transcriptor != null)
        {
            transcriptor?.Dispose();

            RecordButtonText = "Record";
            return;
        }

        var serviceUri = new Uri("ws://192.168.20.118:9091");
        transcriptor = new SingleChannelTranscriptor(serviceUri);
        var filterPipeline = new SegmentFilterFilterPipeline();
        filterPipeline.AddFilter<LastSegmentPerStartTimeFilter>();

        var options =
            new WhisperTranscriptorOptions(
                model: "CodeHardThailand/whisper-th-medium-combined-ct2",
                language: "th",
                isMultiLanguage: false,
                useVoiceActivityDetection: false,
                transcriptionDelay: TimeSpan.FromMilliseconds(100),
                transcriptionTimeout: TimeSpan.FromSeconds(60),
                segmentFilter: filterPipeline);
        var url = new Uri("https://tv-live.tpchannel.org/live/tv.m3u8");

        await transcriptor.StartAsync(url, options);

        transcriptor.MessageArrived += async (id, speaker, segments) =>
        {
            speaker ??= "Default Speaker";

            foreach (var segment in segments)
            {
                var transcriptionMessage = new TranscriptMessage
                {
                    Start = segment.Start,
                    End = segment.End,
                    Length = segment.End - segment.Start,
                    Speaker = $"{segment.Start}-{segment.End} {speaker} : ",
                    Message = segment.Text
                };

                if (!transcriptMessagesDict.TryGetValue(speaker, out var targetList))
                {
                    targetList = new SortedList<double, TranscriptMessage>();
                    transcriptMessagesDict.Add(speaker, targetList);
                }

                if (!targetList.Any())
                {
                    targetList.Add(segment.Start, transcriptionMessage);
                }
                else
                {
                    var messageIndex = targetList.IndexOfKey(segment.Start);

                    // Not found
                    if (messageIndex < 0)
                    {
                        targetList.Add(segment.Start, transcriptionMessage);
                    }
                    else
                    {
                        var current = targetList[segment.Start];

                        if (current.End < segment.End)
                        {
                            targetList[segment.Start] = transcriptionMessage;
                        }
                    }
                }

                await InvokeAsync(StateHasChanged);

                await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-box");
            }
        };

        RecordButtonText = "Stop";
    }

    private void Clear()
    {
        foreach (var v in transcriptMessagesDict)
        {
            v.Value.Clear();
        }
    }

    public void Dispose()
    {
        transcriptor?.Dispose();
        updateTimer?.Dispose();
    }

}