@page "/asr"

@using Transcriptor.Py.Wrapper.Implementation
@using Transcriptor.Py.Wrapper.Enums
@using System.Reactive.Linq
@using System.Diagnostics

@implements IDisposable

@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h3>CH Speech to Text</h3>

<div id="chat-container">
    @foreach (var v in transcriptMessagesDict.OrderBy(kvp => kvp.Key))
    {
        <div id="spk-@v.Key">
            @v.Key
        </div>
        <div id="chat-box">
            @foreach (var transcriptMessage in v.Value.ToArray())
            {
                <div class="other-bubble">
                    @transcriptMessage.Value.Message
                </div>
            }
        </div>
    }
    <div id="ai-input">
        <button id="record-button" @onclick="async () => await StartAudioTranscriptionAsync()">@RecordButtonText</button>
        <button id="clear-button" @onclick="Clear">Clear</button>
    </div>
    <div id="chat-box">
        @foreach (var transcriptMessage in rawTranscriptMessages.ToArray())
        {
            <div class="other-bubble">
                @transcriptMessage.Speaker @transcriptMessage.Message
            </div>
        }
    </div>
</div>

@code {

    public class TranscriptMessage
    {
        public double Start { get; set; }
        public double End { get; set; }
        public double Length { get; set; }
        public string Speaker { get; set; } = "Speaker1";
        public string? Message { get; set; }
    }

    private readonly Dictionary<string, SortedList<double, TranscriptMessage>> transcriptMessagesDict = new();

    // private readonly SortedList<double, TranscriptMessage> transcriptMessagesForSpeaker1 = [];
    // private readonly SortedList<double, TranscriptMessage> transcriptMessagesForSpeaker2 = [];
    private readonly List<TranscriptMessage> rawTranscriptMessages = [];

    private WhisperTranscriptor? transcriptor;

    private Timer? updateTimer;

    private string RecordButtonText = "Record";

    private async Task StartAudioTranscriptionAsync()
    {
        if (transcriptor != null)
        {
            transcriptor?.StopAsync();
            transcriptor?.Dispose();

            RecordButtonText = "Record";
            return;
        }

        var serviceUri = new Uri("ws://192.168.20.98:8765");
        transcriptor = new WhisperTranscriptor(serviceUri);

        var devices = await transcriptor.GetInputInterfacesAsync().ToListAsync();
        //var pulseDevice = devices.Single(d => d.Name == "MacBook Pro Microphone");
        var options = new WhisperTranscriptorOptions(
            ModelType.Default, ModelSize: "CodeHardThailand/whisper-th-medium-combined-ct2", Language: "th", IsMultiLanguage: false);
        var url = new Uri("https://tv-live.tpchannel.org/live/tv.m3u8");

        await transcriptor.StartRecordAsync(url, options);

        double latestStartTime = 0;
        string latestDialog = "";

        transcriptor
            .Where(m => m.Messages.Any())
            .Subscribe(
                result =>
                {
                    var messages = result.Messages.Where(m => m.Text != "โปรดติดตามตอนต่อไป");
                    var distinctMessages =
                        messages
                            .GroupBy(m => (result.Speaker, m.Start))
                            .Select(g => g.Last());

                    foreach (var msg in distinctMessages)
                    {
                        rawTranscriptMessages.Add(
                            new TranscriptMessage
                            {
                                Start = msg.Start,
                                Length = msg.End - msg.Start,
                                Speaker = $"{msg.Start}-{msg.End} {result.Speaker} : ",
                                Message = msg.Text
                            });

                        var transcriptionMessage = new TranscriptMessage
                        {
                            Start = msg.Start,
                            End = msg.End,
                            Length = msg.End - msg.Start,
                            Speaker = $"{msg.Start}-{msg.End} {result.Speaker} : ",
                            Message = msg.Text
                        };

                        SortedList<double, TranscriptMessage> targetList;

                        if (transcriptMessagesDict.TryGetValue(result.Speaker, out targetList))
                        {
                        }
                        else
                        {
                            targetList = new SortedList<double, TranscriptMessage>();
                            transcriptMessagesDict.Add(result.Speaker, targetList);
                        }

                        if (!targetList.Any())
                        {
                            targetList.Add(msg.Start, transcriptionMessage);
                        }
                        else
                        {
                            var messageIndex = targetList.IndexOfKey(msg.Start);

                            // Not found
                            if (messageIndex < 0)
                            {
                                targetList.Add(msg.Start, transcriptionMessage);
                            }
                            else
                            {
                                var current = targetList[msg.Start];

                                if (current.End < msg.End)
                                {
                                    targetList[msg.Start] = transcriptionMessage;
                                }
                            }
                        }

                        InvokeAsync(StateHasChanged);

                        JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-box");

                        latestDialog = msg.Text;
                    }
                });

        RecordButtonText = "Stop";
    }

    private string SkipDuplicateCharacters(string text, string latestDialog)
    {
        return
            new string(
                text.Zip(latestDialog)
                    .SkipWhile(tuple => tuple.First == tuple.Second)
                    .Select(tuple => tuple.First)
                    .ToArray());
    }

    private void Clear()
    {
        foreach (var v in transcriptMessagesDict)
        {
            v.Value.Clear();
        }
    }

    public void Dispose()
    {
        transcriptor?.StopAsync();
        transcriptor?.Dispose();
        updateTimer?.Dispose();
    }

}