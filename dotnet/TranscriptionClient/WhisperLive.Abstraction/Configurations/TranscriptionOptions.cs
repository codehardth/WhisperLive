// <auto-generated />
#nullable enable
using System.Text.Json.Serialization;

namespace WhisperLive.Abstraction.Configurations;

public record VadOptions
{
    [JsonPropertyName("threshold")]
    public float Threshold { get; init; } = 0.5f;

    [JsonPropertyName("min_speech_duration_ms")]
    public int MinSpeechDurationMs { get; init; } = 250;

    [JsonPropertyName("max_speech_duration_s")]
    public float MaxSpeechDurationS { get; init; } = float.MaxValue;

    [JsonPropertyName("min_silence_duration_ms")]
    public int MinSilenceDurationMs { get; init; } = 2000;

    [JsonPropertyName("window_size_samples")]
    public int WindowSizeSamples { get; init; } = 1024;

    [JsonPropertyName("speech_pad_ms")]
    public int SpeechPadMs { get; init; } = 400;
}

public record TranscriptionOptions
{
    [JsonPropertyName("beam_size")]
    public int BeamSize { get; init; }

    [JsonPropertyName("best_of")]
    public int BestOf { get; init; }

    [JsonPropertyName("patience")]
    public float Patience { get; init; }

    [JsonPropertyName("length_penalty")]
    public float LengthPenalty { get; init; }

    [JsonPropertyName("repetition_penalty")]
    public float RepetitionPenalty { get; init; }

    [JsonPropertyName("no_repeat_ngram_size")]
    public int NoRepeatNgramSize { get; init; }

    [JsonPropertyName("temperatures")]
    public float[] Temperatures { get; init; }

    [JsonPropertyName("compression_ratio_threshold")]
    public float? CompressionRatioThreshold { get; init; }

    [JsonPropertyName("log_prob_threshold")]
    public float? LogProbThreshold { get; init; }

    [JsonPropertyName("no_speech_threshold")]
    public float? NoSpeechThreshold { get; init; }

    [JsonPropertyName("condition_on_previous_text")]
    public bool ConditionOnPreviousText { get; init; }

    [JsonPropertyName("prompt_reset_on_temperature")]
    public float PromptResetOnTemperature { get; init; }

    [JsonPropertyName("initial_prompt")]
    public string? InitialPrompt { get; init; }

    [JsonPropertyName("prefix")]
    public string? Prefix { get; init; }

    [JsonPropertyName("suppress_blank")]
    public bool SuppressBlank { get; init; }

    [JsonPropertyName("suppress_tokens")]
    public int[] SuppressTokens { get; init; }

    [JsonPropertyName("without_timestamps")]
    public bool WithoutTimestamps { get; init; }

    [JsonPropertyName("max_initial_timestamp")]
    public float MaxInitialTimestamp { get; init; }

    [JsonPropertyName("word_timestamps")]
    public bool WordTimestamps { get; init; }

    [JsonPropertyName("prepend_punctuations")]
    public string PrependPunctuations { get; init; }

    [JsonPropertyName("append_punctuations")]
    public string AppendPunctuations { get; init; }

    [JsonPropertyName("max_new_tokens")]
    public int? MaxNewTokens { get; init; }

    [JsonPropertyName("clip_timestamps")]
    public string ClipTimestamps { get; init; }

    [JsonPropertyName("hallucination_silence_threshold")]
    public float? HallucinationSilenceThreshold { get; init; }

    public static TranscriptionOptions Default => new TranscriptionOptions
    {
        BeamSize = 5,
        BestOf = 5,
        Patience = 1,
        LengthPenalty = 1,
        RepetitionPenalty = 1,
        NoRepeatNgramSize = 0,
        Temperatures = [ 0.0f, 0.2f, 0.4f, 0.6f, 0.8f, 1.0f ],
        CompressionRatioThreshold = 2.4f,
        LogProbThreshold = -1.0f,
        NoSpeechThreshold = 0.6f,
        ConditionOnPreviousText = true,
        PromptResetOnTemperature = 0.5f,
        InitialPrompt = null,
        Prefix = null,
        SuppressBlank = true,
        SuppressTokens = [ -1 ],
        WithoutTimestamps = false,
        MaxInitialTimestamp = 1.0f,
        WordTimestamps = false,
        PrependPunctuations = "\"'“¿([{-",
        AppendPunctuations = "\"'.。,，!！?？:：”)]}",
        MaxNewTokens = null,
        ClipTimestamps = "0",
        HallucinationSilenceThreshold = null
    };
}
#nullable disable