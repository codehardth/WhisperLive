# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - 'refs/tags/*'

resources:
  - repo: self

variables:
  dockerRegistryServiceConnection: 'e2a8af2a-4c4f-4ef8-bbd1-82dadd2f3470'
  dockerBuildContext: '$(Build.SourcesDirectory)/'
  tag: '$(Build.BuildId)'
  buildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: Build and publish package
    jobs:
      - job: Build
        displayName: Build and publish dotnet projects
        steps:
          - bash: |
              tag=$(git tag --sort=-creatordate | head -n 1)
              echo $tag
              echo "##vso[task.setvariable variable=tag;]$tag"
          - task: UseDotNet@2
            displayName: 'Use .NET Core 8.0 SDK'
            inputs:
              packageType: sdk
              version: 8.x
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - task: DotNetCoreCLI@2
            displayName: 'Restore dependencies'
            inputs:
              command: 'restore'
              projects: '$(Build.SourcesDirectory)/dotnet/TranscriptionClient/TranscriptionClient.sln'
          - task: DotNetCoreCLI@2
            displayName: 'Build projects'
            inputs:
              command: 'build'
              projects: '$(Build.SourcesDirectory)/dotnet/TranscriptionClient/TranscriptionClient.sln'
              arguments: '--no-restore --configuration $(BuildConfiguration) /p:ContinuousIntegrationBuild=true'
          - task: NuGetToolInstaller@1
            displayName: 'Install Mono'
          - task: NuGetAuthenticate@1
            displayName: 'NuGet Authenticate'

          - task: DotNetCoreCLI@2
            displayName: 'Pack WhisperLive.Abstraction NuGet package'
            inputs:
              command: 'pack'
              configuration: $(BuildConfiguration)
              packagesToPack: '$(Build.SourcesDirectory)/dotnet/TranscriptionClient/WhisperLive.Abstraction/WhisperLive.Abstraction.csproj'
              packDestination: '$(Build.ArtifactStagingDirectory)'
              versioningScheme: byEnvVar
              versionEnvVar: tag
              verbosityPack: 'Normal'
          - task: DotNetCoreCLI@2
            displayName: 'Pack WhisperLive.Client NuGet package'
            inputs:
              command: 'pack'
              configuration: $(BuildConfiguration)
              packagesToPack: '$(Build.SourcesDirectory)/dotnet/TranscriptionClient/WhisperLive.Client/WhisperLive.Client.csproj'
              packDestination: '$(Build.ArtifactStagingDirectory)'
              versioningScheme: byEnvVar
              versionEnvVar: tag
              verbosityPack: 'Normal'
          - task: DotNetCoreCLI@2
            displayName: 'Pack WhisperLive.Client.Recorder NuGet package'
            inputs:
              command: 'pack'
              configuration: $(BuildConfiguration)
              packagesToPack: '$(Build.SourcesDirectory)/dotnet/TranscriptionClient/WhisperLive.Client.Recorder/WhisperLive.Client.Recorder.csproj'
              packDestination: '$(Build.ArtifactStagingDirectory)'
              versioningScheme: byEnvVar
              versionEnvVar: tag
              verbosityPack: 'Normal'
          - task: NuGetCommand@2
            displayName: 'Publish NuGet packages'
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'Codehard Token For TranscriptorPyWrapper'
      - job: Docker
        displayName: Build and publish Docker images
        steps:
          - bash: |
              tag=$(git tag --sort=-creatordate | head -n 1)
              echo $tag
              echo "##vso[task.setvariable variable=tag;]$tag"
          - task: Docker@2
            displayName: 'Build and push socket client to common registry'
            inputs:
              command: buildAndPush
              repository: whisper-asr-socket-client
              dockerfile: '$(Build.SourcesDirectory)/docker/Dockerfile.client'
              buildContext: $(dockerBuildContext)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                latest
                $(tag)
          - task: Docker@2
            displayName: 'Build and push ASR server (cpu) image to common registry'
            inputs:
              command: buildAndPush
              repository: whisper-asr-server
              dockerfile: '$(Build.SourcesDirectory)/docker/Dockerfile.cpu'
              buildContext: $(dockerBuildContext)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                latest
                cpu
                $(tag)-cpu
          - task: Docker@2
            displayName: 'Build and push ASR server (gpu) image to common registry'
            inputs:
              command: buildAndPush
              repository: whisper-asr-server
              dockerfile: '$(Build.SourcesDirectory)/docker/Dockerfile.gpu'
              buildContext: $(dockerBuildContext)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                gpu
                $(tag)-gpu